/*
 * This file was generated - do not edit it directly !!
 * Generated by AuDAO tool, a product of Spolecne s.r.o.
 * For more information please visit http://www.spoledge.com
 */
package uk.me.g4dpz.gae.satellitecloud.dao.gae;


import java.sql.Date;
import java.sql.Timestamp;

import java.util.ArrayList;

import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.appengine.api.datastore.Query;


import com.spoledge.audao.db.dao.gae.GaeAbstractDaoImpl;
import com.spoledge.audao.db.dao.DBException;
import com.spoledge.audao.db.dao.DaoException;

import uk.me.g4dpz.gae.satellitecloud.dao.SatelliteElementSetDao;
import uk.me.g4dpz.gae.satellitecloud.dto.SatelliteElementSet;


/**
 * This is the DAO imlementation class.
 *
 * @author generated
 */
public class SatelliteElementSetDaoImpl extends GaeAbstractDaoImpl<SatelliteElementSet> implements SatelliteElementSetDao {

    private static final String TABLE_NAME = "SatelliteElementSet";

    public SatelliteElementSetDaoImpl( DatastoreService ds ) {
        super( ds );
    }

    /**
     * Finds a record identified by its primary key.
     * @return the record found or null
     */
    public SatelliteElementSet findByPrimaryKey( long catalogNumber ) {
        Entity _ent = entityGet( new KeyFactory.Builder( "SatelliteElementSet", catalogNumber ).getKey());

        return _ent != null ? fetch( null, _ent ) : null;
    }

    /**
     * Finds a record.
     */
    public SatelliteElementSet findByCatalogNumber( long catalogNumber ) {
        Query _query = getQuery();
        _query.addFilter( "catalogNumber", Query.FilterOperator.EQUAL, catalogNumber );

        return findOne( _query, "catalogNumber = :1", 0, catalogNumber);
    }

    /**
     * Inserts a new record.
     */
    public void insert( SatelliteElementSet dto ) throws DaoException {
        checkNull( "catalogNumber", dto.getCatalogNumber());

        Entity ent = new Entity( new KeyFactory.Builder( "SatelliteElementSet", dto.getCatalogNumber()).getKey());

        {
            if ( dto.getName() == null ) {
                throw new DaoException("Value of column 'name' cannot be null");
            }
            checkMaxLength( "name", dto.getName(), 30 );
            ent.setProperty( "name", dto.getName());

            if ( dto.getLine1() == null ) {
                throw new DaoException("Value of column 'line1' cannot be null");
            }
            checkMaxLength( "line1", dto.getLine1(), 80 );
            ent.setProperty( "line1", dto.getLine1());

            if ( dto.getLine2() == null ) {
                throw new DaoException("Value of column 'line2' cannot be null");
            }
            checkMaxLength( "line2", dto.getLine2(), 80 );
            ent.setProperty( "line2", dto.getLine2());

            if ( dto.getSetNumber() == null ) {
                throw new DaoException("Value of column 'setNumber' cannot be null");
            }
            ent.setProperty( "setNumber", dto.getSetNumber());

            if ( dto.getCreatedDate() == null ) {
                throw new DaoException("Value of column 'createdDate' cannot be null");
            }
            ent.setProperty( "createdDate", date( dto.getCreatedDate() ));
            ent.setProperty( "updatedDate", dto.getUpdatedDate() == null ? null : date( dto.getUpdatedDate() ));
        }

        entityPut( ent, dto, "insert" );
    }

    /**
     * Updates one record found by primary key.
     * @return true iff the record was really updated (=found and any change was really saved)
     */
    public boolean update( long catalogNumber, SatelliteElementSet dto ) throws DaoException {
        Entity _ent = entityGet( new KeyFactory.Builder( "SatelliteElementSet", catalogNumber ).getKey());
        if (_ent == null) return false;

        boolean isUpdated = false;

        if ( dto.getName() != null ) {
            checkMaxLength( "name", dto.getName(), 30 );
            _ent.setProperty( "name", dto.getName());
            isUpdated = true;
        }

        if ( dto.getLine1() != null ) {
            checkMaxLength( "line1", dto.getLine1(), 80 );
            _ent.setProperty( "line1", dto.getLine1());
            isUpdated = true;
        }

        if ( dto.getLine2() != null ) {
            checkMaxLength( "line2", dto.getLine2(), 80 );
            _ent.setProperty( "line2", dto.getLine2());
            isUpdated = true;
        }

        if ( dto.getSetNumber() != null ) {
            _ent.setProperty( "setNumber", dto.getSetNumber());
            isUpdated = true;
        }

        if ( dto.getCreatedDate() != null ) {
            _ent.setProperty( "createdDate", date( dto.getCreatedDate() ));
            isUpdated = true;
        }

        if ( dto.isUpdatedDateModified()) {
            _ent.setProperty( "updatedDate", dto.getUpdatedDate() == null ? null : date( dto.getUpdatedDate() ));
            isUpdated = true;
        }

        if (!isUpdated) {
            return false;
        }


        entityPut( _ent, dto, "update" );

        return true;
    }

    /**
     * Returns the table name.
     */
    public String getTableName() {
        return TABLE_NAME;
    }

    protected SatelliteElementSet fetch( SatelliteElementSet dto, Entity ent ) {
        if ( dto == null ) dto = new SatelliteElementSet();

        dto.setCatalogNumber( ent.getKey().getId());
        dto.setName( getString( ent, "name" ));
        dto.setLine1( getString( ent, "line1" ));
        dto.setLine2( getString( ent, "line2" ));
        dto.setSetNumber( getLong( ent, "setNumber" ));
        dto.setCreatedDate( getDate( ent, "createdDate" ));
        dto.setUpdatedDate( getDate( ent, "updatedDate" ));

        return dto;
    }

    protected SatelliteElementSet[] toArray(ArrayList<SatelliteElementSet> list ) {
        SatelliteElementSet[] ret = new SatelliteElementSet[ list.size() ];
        return list.toArray( ret );
    }

}
