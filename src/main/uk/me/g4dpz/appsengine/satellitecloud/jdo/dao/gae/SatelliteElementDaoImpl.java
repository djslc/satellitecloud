/*
 * This file was generated - do not edit it directly !!
 * Generated by AuDAO 2009 tool, a product of Spolecne s.r.o.
 * For more information please visit http://www.spoledge.com
 */
package uk.me.g4dpz.appsengine.satellitecloud.jdo.dao.gae;


import java.sql.Date;
import java.sql.Timestamp;

import java.util.ArrayList;
import java.util.List;

import javax.jdo.JDOException;
import javax.jdo.JDOObjectNotFoundException;
import javax.jdo.PersistenceManager;
import javax.jdo.Query;

import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;

import com.spoledge.audao.db.dao.gae.GaeAbstractDaoImpl;
import com.spoledge.audao.db.dao.DBException;
import com.spoledge.audao.db.dao.DaoException;

import uk.me.g4dpz.appsengine.satellitecloud.jdo.dao.SatelliteElementDao;
import uk.me.g4dpz.appsengine.satellitecloud.jdo.dto.SatelliteElement;
import uk.me.g4dpz.appsengine.satellitecloud.jdo.dto.gae.SatelliteElementImpl;


/**
 * This is the DAO imlementation class.
 *
 * @author generated
 */
public class SatelliteElementDaoImpl extends GaeAbstractDaoImpl<SatelliteElement> implements SatelliteElementDao {

    public SatelliteElementDaoImpl( PersistenceManager pm ) {
        super( pm );
    }

    /**
     * Finds a record identified by its primary key.
     * @return the record found or null
     */
    public SatelliteElement findByPrimaryKey( long id ) {
        SatelliteElementImpl impl = null;

        try {
            impl = pm.getObjectById( SatelliteElementImpl.class, id);
        }
        catch (JDOObjectNotFoundException _e) {}

        return impl != null ? impl._getDto() : null;
    }

    /**
     * Finds a record.
     */
    public SatelliteElement findByCatalogueNumber( Long catalogueNumber ) {
        return findOne( "catalogueNumber == :_catalogueNumber", catalogueNumber);
    }

    /**
     * Counts records using index inx_satel_catno.
     */
    public int countByCatalogueNumber( Long catalogueNumber ) {
        return count( "catalogueNumber == :_catalogueNumber", catalogueNumber);
    }

    /**
     * Finds records using index inx_satel_catno.
     */
    public SatelliteElement findByCatalogueNumber( int offset, int count, Long catalogueNumber ) {
        return findOne( "catalogueNumber == :_catalogueNumber", catalogueNumber);
    }

    /**
     * Deletes records.
     * @return the number of records deleted
     */
    public int deleteSatellite( Long catalogueNumber ) throws DaoException {
        return deleteMany( "[CDATA[catalogueNumber=?]]", catalogueNumber);
    }

    /**
     * Inserts a new record.
     * @return the generated primary key - id
     */
    public long insert( SatelliteElement dto ) throws DaoException {

        debugSql( "insert", dto );

        try {
            SatelliteElementImpl impl = new SatelliteElementImpl();

            if ( dto.getCatalogueNumber() == null ) {
                // none for GAE
            }
            else {
                impl.setCatalogueNumber( dto.getCatalogueNumber());
            }

            if ( dto.getElementSet() == null ) {
                // none for GAE
            }
            else {
                impl.setElementSet( dto.getElementSet());
            }

            if ( dto.getGroupId() == null ) {
                // none for GAE
            }
            else {
                impl.setGroupId( dto.getGroupId());
            }

            pm.makePersistent( impl );

            dto.setId( impl.getId().getId());

            return dto.getId();
        }
        catch (JDOException e) {
            errorSql( e, "insert", dto );

            throw new DaoException( e );
        }
    }

    /**
     * Returns the table name.
     */
    public String getTableName() {
        return null;
    }

    protected Query getQuery() {
        return pm.newQuery( SatelliteElementImpl.class );
    }

    protected SatelliteElement fetch( Query q, Object... params ) {
        SatelliteElementImpl impl = (SatelliteElementImpl) execute( q, params );

        return impl != null ? impl._getDto() : null;
    }

    protected SatelliteElement[] fetchArray( Query q, Object... params ) {
        List<?> list = (List<?>) execute( q, params );

        SatelliteElement[] ret = new SatelliteElement[ list.size() ];

        int index=0;
        for ( Object o : list ) {
            SatelliteElementImpl impl = (SatelliteElementImpl) o;
            ret[ index++ ] = impl._getDto();
        }

        return ret;
    }

}
