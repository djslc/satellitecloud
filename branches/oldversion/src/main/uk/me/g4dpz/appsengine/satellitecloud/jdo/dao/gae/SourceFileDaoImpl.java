/*
 * This file was generated - do not edit it directly !!
 * Generated by AuDAO 2009 tool, a product of Spolecne s.r.o.
 * For more information please visit http://www.spoledge.com
 */
package uk.me.g4dpz.appsengine.satellitecloud.jdo.dao.gae;


import java.sql.Date;
import java.sql.Timestamp;

import java.util.ArrayList;
import java.util.List;

import javax.jdo.JDOException;
import javax.jdo.JDOObjectNotFoundException;
import javax.jdo.PersistenceManager;
import javax.jdo.Query;

import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;

import com.spoledge.audao.db.dao.gae.GaeAbstractDaoImpl;
import com.spoledge.audao.db.dao.DBException;
import com.spoledge.audao.db.dao.DaoException;

import uk.me.g4dpz.appsengine.satellitecloud.jdo.dao.SourceFileDao;
import uk.me.g4dpz.appsengine.satellitecloud.jdo.dto.SourceFile;
import uk.me.g4dpz.appsengine.satellitecloud.jdo.dto.gae.SourceFileImpl;


/**
 * This is the DAO imlementation class.
 *
 * @author generated
 */
public class SourceFileDaoImpl extends GaeAbstractDaoImpl<SourceFile> implements SourceFileDao {

    public SourceFileDaoImpl( PersistenceManager pm ) {
        super( pm );
    }

    /**
     * Finds a record identified by its primary key.
     * @return the record found or null
     */
    public SourceFile findByPrimaryKey( long id ) {
        SourceFileImpl impl = null;

        try {
            impl = pm.getObjectById( SourceFileImpl.class, id);
        }
        catch (JDOObjectNotFoundException _e) {}

        return impl != null ? impl._getDto() : null;
    }

    /**
     * Finds a record.
     */
    public SourceFile findByName( String name ) {
        return findOne( "name == :_name", name);
    }

    /**
     * Counts records using index inx_sourcefile_name.
     */
    public int countByName( String name ) {
        return count( "name == :_name", name);
    }

    /**
     * Finds records using index inx_sourcefile_name.
     */
    public SourceFile findByName( int offset, int count, String name ) {
        return findOne( "name == :_name", name);
    }

    /**
     * Deletes records.
     * @return the number of records deleted
     */
    public int deleteSourceFile( String name ) throws DaoException {
        return deleteMany( "[CDATA[name=?]]", name);
    }

    /**
     * Inserts a new record.
     * @return the generated primary key - id
     */
    public long insert( SourceFile dto ) throws DaoException {

        debugSql( "insert", dto );

        try {
            SourceFileImpl impl = new SourceFileImpl();

            if ( dto.getName() != null ) {
                checkMaxLength( "name", dto.getName(), 255 );
            }
            impl.setName( dto.getName());

            if ( dto.getUrl() != null ) {
                checkMaxLength( "url", dto.getUrl(), 255 );
            }
            impl.setUrl( dto.getUrl());

            pm.makePersistent( impl );

            dto.setId( impl.getId().getId());

            return dto.getId();
        }
        catch (JDOException e) {
            errorSql( e, "insert", dto );

            throw new DaoException( e );
        }
    }

    /**
     * Returns the table name.
     */
    public String getTableName() {
        return null;
    }

    protected Query getQuery() {
        return pm.newQuery( SourceFileImpl.class );
    }

    protected SourceFile fetch( Query q, Object... params ) {
        SourceFileImpl impl = (SourceFileImpl) execute( q, params );

        return impl != null ? impl._getDto() : null;
    }

    protected SourceFile[] fetchArray( Query q, Object... params ) {
        List<?> list = (List<?>) execute( q, params );

        SourceFile[] ret = new SourceFile[ list.size() ];

        int index=0;
        for ( Object o : list ) {
            SourceFileImpl impl = (SourceFileImpl) o;
            ret[ index++ ] = impl._getDto();
        }

        return ret;
    }

}
